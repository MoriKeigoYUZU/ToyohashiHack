{"remainingRequest":"/Users/k18105kk/src/toyohashi/toyohashi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/k18105kk/src/toyohashi/toyohashi/src/pages/Navigation.vue?vue&type=style&index=0&id=4ec025b8&lang=scss&scoped=true&","dependencies":[{"path":"/Users/k18105kk/src/toyohashi/toyohashi/src/pages/Navigation.vue","mtime":1577403108209},{"path":"/Users/k18105kk/src/toyohashi/toyohashi/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/k18105kk/src/toyohashi/toyohashi/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/k18105kk/src/toyohashi/toyohashi/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/k18105kk/src/toyohashi/toyohashi/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/k18105kk/src/toyohashi/toyohashi/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/k18105kk/src/toyohashi/toyohashi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/k18105kk/src/toyohashi/toyohashi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ob2dlIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDAwMDA7Cn0KCi5mdWdhIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7Cn0K"},{"version":3,"sources":["Navigation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuPA;AACA;AACA;;AAEA;AACA;AACA","file":"Navigation.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <!-- <div> -->\n    <!-- <v-btn @click=\"test\">test</v-btn> -->\n\n\n    <!-- {{latitude}}、{{longitude}} -->\n    <!-- </div> -->\n    <!--<pre id=\"position_view\"></pre>-->\n\n    <!--<div id=\"txt2\">データ表示</div>-->\n    <!--<div id=\"txt\">ここにデータを表示</div>-->\n    <!--<div>-->\n        <!--<p>{{ geo_text }}</p>-->\n        <!--<v-btn @click=\"getLocation\">現在地付近</v-btn>-->\n    <!--</div>-->\n    <div :class=\"customizedClass\">\n        <!--<img src=\"../assets/center_close.gif\" height=\"1136\" width=\"640\"/>-->\n    </div>\n\n\n</template>\n\n<script>\n  export default {\n    name: \"Navigation\",\n\n    data() {\n      return {\n        // watch_id: \"\",\n        // num: \"\",\n        // alpha: \"\",\n        // timer: \"\",\n        // date: \"\",\n        geo_text: \"\",\n        latitude: 0,\n        longitude: 0,\n        customizedClass: 'hoge',\n      }\n    },\n\n    methods: {\n\n\n      // getLocation:function () {\n      //   if( navigator.geolocation ){\n      //     this.geo_text = 'da'\n      //\n      //   } else {\n// 現在位置を取得できない場合の処理\n//         }\n      //     // this.geo_text = 'da'\n      //    if (process.client) {\n      //      if (!navigator.geolocation) {\n      //        alert('現在地情報を取得できませんでした。お使いのブラウザでは現在地情報を利用できない可能性があります。エリアを入力してください。')\n      //        return\n      //      }\n\n      //      const options = {\n      //        enableHighAccuracy: false,\n      //        timeout: 5000,\n      //        maximumAge: 0\n      //      }\n\n      //      navigator.geolocation.getCurrentPosition(this.success, this.error, options)\n      //    }\n      //  },\n\n      //  success:function (position) {\n      //    this.latitude = position.coords.latitude\n      //    this.longitude = position.coords.longitude\n      //  },\n\n      //  error:function (error) {\n      //    switch (error.code) {\n      //      case 1: //PERMISSION_DENIED\n      //        alert('位置情報の利用が許可されていません')\n      //        break\n      //      case 2: //POSITION_UNAVAILABLE\n      //        alert('現在位置が取得できませんでした')\n      //        break\n      //      case 3: //TIMEOUT\n      //        alert('タイムアウトになりました')\n      //        break\n      //      default:\n      //        alert('現在位置が取得できませんでした')\n      //        break\n      //    }\n      //   }\n      //\n      //\n      // }\n      // test: function () {\n      //   this.watch_id = navigator.geolocation.watchPosition(\n      //     this.test2(),\n      //     function (e) {\n      //       alert(e.message);\n      //     },\n      //     {enableHighAccuracy: true, timeout: 20000, maximumAge: 2000}\n      //   );\n      // },\n\n      // test2: function () {\n\n      // this.geo_text = \"緯度:\" + position.coords.latitude + \"\\n\";\n      // this.geo_text += \"経度:\" + position.coords.longitude + \"\\n\";\n      // this.geo_text += \"高度:\" + position.coords.altitude + \"\\n\";\n      // this.geo_text += \"位置精度:\" + position.coords.accuracy + \"\\n\";\n      // this.geo_text += \"高度精度:\" + position.coords.altitudeAccuracy + \"\\n\";\n      // this.geo_text += \"移動方向:\" + position.coords.heading + \"\\n\";\n      // this.geo_text += \"速度:\" + position.coords.speed + \"\\n\";\n\n      // this.date = new Date(position.timestamp);\n      //\n      // this.geo_text += \"取得時刻:\" + this.date.toLocaleString() + \"\\n\";\n      //\n      // alert(this.geo_text);\n\n      // },\n\n\n      // test2: function(position) {\n      //\n      //\n      //   this.geo_text = \"緯度:\" + position.coords.latitude + \"\\n\";\n      //   this.geo_text += \"経度:\" + position.coords.longitude + \"\\n\";\n      //   this.geo_text += \"高度:\" + position.coords.altitude + \"\\n\";\n      //   this.geo_text += \"位置精度:\" + position.coords.accuracy + \"\\n\";\n      //   this.geo_text += \"高度精度:\" + position.coords.altitudeAccuracy + \"\\n\";\n      //   this.geo_text += \"移動方向:\" + position.coords.heading + \"\\n\";\n      //   this.geo_text += \"速度:\" + position.coords.speed + \"\\n\";\n      //\n      //   this.geo_text = position.coords.latitude;\n      //\n      //   this.date = new Date(position.timestamp);\n      //\n      //   //サンプルデータ(オアシス21)\n      //   var tLatitude = 35.1708924;\n      //   var tLongitude = 136.9095254;\n      //\n      //\n      //   //サンプルデータと現時点との角度測定。\n      //   tLatitude *= Math.PI / 180;\n      //   tLongitude *= Math.PI / 180;\n      //   var gLatitude = position.coords.latitude * Math.PI / 180;\n      //   var gLongitude = position.coords.longitude * Math.PI / 180;\n      //\n      //   var Between = 0.0;\n      //   var time = 0.0;\n      //\n      //   //二点間の距離\n      //   Between += 6371 * Math.acos(Math.cos(tLatitude) * Math.cos(gLatitude) * Math.cos(gLongitude - tLongitude) + Math.sin(tLatitude) * Math.sin(gLatitude)) + \"\\n\";\n      //   this.geo_text += \"二点間の距離\" + Between + \"km\" + \"\\n\";\n      //   // console.log(Between);\n      //\n      //   //時間\n      //   time += ((6371 * Math.acos(Math.cos(tLatitude) * Math.cos(gLatitude) * Math.cos(gLongitude - tLongitude) + Math.sin(tLatitude) * Math.sin(gLatitude))) * 1000) / 77 + \"\\n\";\n      //   this.geo_text += \"かかる時間\" + time + \"分\" + \"\\n\";\n      //   // console.log(time);\n      //\n      //   // geo_text += \"取得時刻:\" + date.toLocaleString() + \"\\n\";\n      //   this.geo_text += \"更新回数:\" + (this.num++) + \"\\n\";\n      //\n      //\n      //   var rad = Math.atan2(gLatitude - tLatitude, gLongitude - tLongitude);\n      //   // var angle = rad * (180 / Math.PI) ; // ラジアンを度数へ変換\n      //   this.geo_text += \"角度\" + (rad * (180 / Math.PI) + 180);\n      //\n      //\n      //   document.getElementById('position_view').innerHTML = this.geo_text;\n      // },\n\n      // ジャイロセンサの値が変化したら実行される deviceorientation イベント\n      // window.addEventListener(\"deviceorientation\", (dat) => {\n      //   alpha = dat.alpha;  // z軸（表裏）まわりの回転の角度（反時計回りがプラス）\n      // });\n\n      // 指定時間ごとに繰り返し実行される setInterval(実行する内容, 間隔[ms]) タイマーを設定\n      //       var timer = window.setInterval(() => {\n      //           displayData();      // displayData 関数を実行\n      //       }, 33); // 33msごとに（1秒間に約30回）\n\n\n      // ジャイロセンサの値が変化したら実行される deviceorientation イベント\n\n      // beforeDestroy:() => {\n      //   window.addEventListener(\"deviceorientation\", (dat) => {\n      //     this.alpha = dat.alpha;\n      //\n      //   })\n      // },\n\n      // 指定時間ごとに繰り返し実行される setInterval(実行する内容, 間隔[ms]) タイマーを設定\n\n      // this.timer = window.setInterval(() => {\n      //   displayData();      // displayData 関数を実行\n      // }, 33), // 33msごとに（1秒間に約30回）\n\n\n      // データを表示する displayData 関数\n      // displayData: () => {\n      //   var txt = document.getElementById(\"txt\");   // データを表示するdiv要素の取得\n      //   var txt2 = document.getElementById(\"txt2\");   // データを表示するdiv要素の取得\n      //\n      //   // this.alpha = this.alpha - 180;\n      //   txt.innerHTML = \"this.alpha: \" + (this.alpha + 180) + \"<br>\";// x軸の値\n      //\n      //   var adirection = this.alpha - 180;\n      //   // var adirection = this.alpha;     //検証用(本番では上を使う)\n      //   console.log(adirection);\n      //\n      //\n      //   var a = adirection\n      //   //検証用\n      //   // var a = adirection;              //前\n      //   // var a = adirection + 90;         //右\n      //   // var a = adirection - 90;         //左\n      //   // var a = adirection + 180;        //後ろ\n      //\n      //\n      //   if (-45 < a && a < 45) {\n      //     // return 1;   //まっすぐ\n      //     var b = a;\n      //     txt2.innerHTML = \"1,まっすぐ\";\n      //\n      //     console.log('1');\n      //   } else if (45 <= a && a < 135) {\n      //     // return 2;   //右?\n      //     txt2.innerHTML = \"2,多分右\";\n      //     console.log('2');\n      //   } else if (-135 < a && a <= -45) {\n      //     // return 3;   //左?\n      //     txt2.innerHTML = \"3,多分左\";\n      //     console.log('3');\n      //   } else {\n      //     // return 4;    //後ろ\n      //     txt2.innerHTML = \"4,後ろ\";\n      //     console.log('4');\n      //   }\n      // }\n\n\n      // }\n    },\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n    .hoge {\n        background-color: #000000;\n    }\n\n    .fuga {\n        background-color: #ffffff;\n    }\n</style>"]}]}